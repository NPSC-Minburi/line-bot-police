from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    ImageSendMessage, LocationSendMessage
)
from sheet import (
    add_person, update_location, search_person,
    update_case_info
)

app = Flask(__name__)

line_bot_api = LineBotApi("XZQfnLfuJztTHpij7sX+4N89Hn/hO1AGLiXwieEFPf47YZcOMVEHyNgdfUC8sEF23opgt2LCtDKS7uNSMQukHQb4Zf7jpzUcjK13LyJAbyiw+h9UATVBQ0QQhySaQoDXW8+uESgYCr4b7pE5pStCjQdB04t89/1O/w1cDnyilFU=")
handler = WebhookHandler("8c6da693d7fe0139694d880b5a8a18bd")

@app.route("/ping")
def ping():
    return "pong"

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    reply = "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"

    if text.startswith("@ "):
        try:
            parts = text.replace("@", "", 1).strip().split(",")
            if len(parts) != 4:
                reply = "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: @ ‡∏ä‡∏∑‡πà‡∏≠,‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£,‡πÄ‡∏ö‡∏≠‡∏£‡πå,‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            else:
                name, id_card, phone, address = [p.strip() for p in parts]
                add_person(name, id_card, phone, address)
                reply = f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
        except Exception as e:
            reply = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

    elif text.startswith("@lat"):
        try:
            _, id_card, location = text.strip().split(" ", 2)
            ok = update_location(id_card, location)
            reply = "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß" if ok else "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ"
        except:
            reply = "‚ùå ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: @lat <‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£> <‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î,‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î>"

    elif text.startswith("@‡∏à‡∏±‡∏ö"):
        try:
            parts = text.replace("@‡∏à‡∏±‡∏ö", "", 1).strip().split(",")
            if len(parts) != 5:
                reply = "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: @‡∏à‡∏±‡∏ö ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£,‡∏Ç‡πâ‡∏≠‡∏´‡∏≤,‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Å‡∏∏‡∏°,‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà,‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á"
            else:
                id_card, charge, place, date, evidence = [p.strip() for p in parts]
                ok = update_case_info(id_card, charge, place, date, evidence)
                reply = "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Å‡∏∏‡∏°‡πÅ‡∏•‡πâ‡∏ß" if ok else "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ"
        except Exception as e:
            reply = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

    elif text.startswith("#"):
        keyword = text.replace("#", "").strip()
        results = search_person(keyword)
        messages = []

        if results:
            for r in results:
                detail = f"""üë§ {r['name']}
üÜî {r['id_card']}
üìû {r['phone']}
üè† {r['address']}
üìç {r['location'] or '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ'}
üöì ‡∏Ç‡πâ‡∏≠‡∏´‡∏≤: {r['charge'] or '-'}
üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö: {r['arrest_place'] or '-'}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö: {r['arrest_date'] or '-'}
üßæ ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á: {r['evidence'] or '-'}"""
                messages.append(TextSendMessage(text=detail))

                if r.get("photo_url") and r["photo_url"].startswith("http"):
                    messages.append(ImageSendMessage(
                        original_content_url=r["photo_url"],
                        preview_image_url=r["photo_url"]
                    ))

                if r["location"]:
                    try:
                        lat, lng = map(float, r["location"].split(","))
                        messages.append(LocationSendMessage(
                            title=f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á {r['name']}",
                            address=r["address"],
                            latitude=lat,
                            longitude=lng
                        ))
                    except:
                        messages.append(TextSendMessage(text="‚ö†Ô∏è ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))

            line_bot_api.reply_message(event.reply_token, messages)
            return
        else:
            reply = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

    elif text in ["‡πÄ‡∏°‡∏ô‡∏π", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ"]:
        reply = """üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó:
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠
@ ‡∏ä‡∏∑‡πà‡∏≠,‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£,‡πÄ‡∏ö‡∏≠‡∏£‡πå,‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Location
@lat ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î,‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á
@‡∏à‡∏±‡∏ö ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£,‡∏Ç‡πâ‡∏≠‡∏´‡∏≤,‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Å‡∏∏‡∏°,‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà,‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á
‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
# ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ # ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£"""

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply)
    )

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
